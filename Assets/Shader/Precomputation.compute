#pragma kernel CSIntergalCPDensity
#pragma kernel CSsunOnSurface
#pragma kernel CSAmbient
#pragma kernel CSInScattering

// IntegrateInscattering
// P - current integration point
// A - camera position
// C - top of the atmosphere

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "ShaderLibrary/InScattering.hlsl"

#define SAMPLECOUNT_DENSITY 256
#define SAMPLECOUNT_INSCATTERING 512

// CP Particle Density
RWTexture2D<float2> _RWintegralCPDensityLUT;

// Sun On Surface
RWTexture2D<float3> _RWsunOnSurfaceLUT;

// InScattering
RWTexture2D<float3> _RWinScatteringLUT;
Texture2D<float3> _InScatteringLUT;

// Ambient
RWTexture2D<float3> _RWambientLUT;
Texture2D<float3> _RWhemiSphereRandomNormlizedVecLUT;

//TODO Sample State
SamplerState _trilinearClampSampler;
SamplerState _pointClampSampler;

// Helper Function
float3 Transmittance(float cosAngle01, float height01)
{
    float2 particleDensityCP = _IntegralCPDensityLUT.SampleLevel(_trilinearClampSampler, float2(cosAngle01, height01), 0.0).xy;
    float3 TrCP = particleDensityCP.x * _ExtinctionR;
    float3 TmCP = particleDensityCP.y * _ExtinctionM;
    return exp(-TrCP - TmCP);
}

// =================================================================================
// PreComputeDensity
// =================================================================================
float2 ComputeDensity(float3 rayStart, float3 rayDir)
{
    float3 planetCenter = float3(0, -_PlanetRadius, 0);
    
    float stepCount = SAMPLECOUNT_DENSITY;
    
    float2 intersection = RaySphereIntersection(rayStart, rayDir, planetCenter, _PlanetRadius);
    if (intersection.x > 0)
    {
        // 视线与行球表面相交则写入高密度
        return 1 * pow(10, 20);
    }
    
    intersection = RaySphereIntersection(rayStart, rayDir, planetCenter, _PlanetRadius + _AtmosphereHeight);
    float3 rayEnd = rayStart + rayDir * intersection.y;
    
    // compute density along the ray
    float3 step = (rayEnd - rayStart) / stepCount;
    float stepSize = length(step);
    float2 density = 0;
    
    for (float s = 0.5; s < stepCount; s += 1.0)
    {
        float3 position = rayStart + step * s;
        float height = abs(length(position - planetCenter) - _PlanetRadius);
        float2 localDensity = exp( - (height.xx / _DensityScaleHeight));
        
        density += localDensity * stepSize;
    }
    
    return density;
}

// P是视线上一路径点, C是光到大气层的交点,即光开始散射到P的点, 这一步用于预先计算out scattering
[numthreads(8, 8, 1)]
void CSIntergalCPDensity(uint3 id: SV_DispatchThreadID)
{
    int w, h;
    _RWintegralCPDensityLUT.GetDimensions(w, h);
    
    float cosAngle01 = (float)id.x / w;
    float height01 = (float)id.y / h;
    
    float cosAngle = cosAngle01 * 2 - 1;
    float sinAngle = sqrt(1 - saturate(cosAngle * cosAngle));
    float height = lerp(0, _AtmosphereHeight, height01);
    
    float3 rayStart = float3(0, height, 0);
    float3 rayDir = float3(sinAngle, cosAngle, 0);
    
    _RWintegralCPDensityLUT[id.xy] = ComputeDensity(rayStart, rayDir);
}

// =================================================================================
// PrecomputeSunOnSurface
// =================================================================================
float3 ComputeSunOnSurface(float cosAngle01, float height01)
{
    return _LightFromOuterSpace * Transmittance(cosAngle01, height01);
}

[numthreads(8, 8, 1)]
void CSsunOnSurface(uint3 id: SV_DispatchThreadID)
{
    int w, h;
    _RWsunOnSurfaceLUT.GetDimensions(w, h);
    
    float cosAngle01 = (float)id.x / w;
    float height01 = (float)id.y / h;
    
    _RWsunOnSurfaceLUT[id.xy] = ComputeSunOnSurface(cosAngle01, height01);
}

// =================================================================================
// PrecomputeAmbient
// =================================================================================
float3 ComputeAmbient(float cosSunAngle01, int count)
{
    float cosSunAngle = cosSunAngle01 * 2 - 1;
    float sinSunAngle = 1 - sqrt(cosSunAngle * cosSunAngle);
    float3 lightDir = float3(sinSunAngle, cosSunAngle, 0);
    
    float3 total = (float3)0;
    // 蒙特卡洛法对散射做积分
    for (int i = 0; i < count; ++ i)
    {            
        float3 viewDir = _RWhemiSphereRandomNormlizedVecLUT.SampleLevel(_pointClampSampler, float2((float)i / count, 0.5), 0.0, 0.0).xyz;
        float cosViewAngle = dot(viewDir,float3(0,1,0));
        
        //float3 extinction;
        // x : viewDir, y: sunDir 
        float3 inScattering = _InScatteringLUT.SampleLevel(_trilinearClampSampler,float2(cosViewAngle * 0.5 + 0.5,cosSunAngle01),0); 
        
        total += cosViewAngle * inScattering;
    }
    // 这里用的对立体角求积分, 需要* 4π * 0.5(半球), 所以这里需要额外乘2π
    total = 2 * PI *total/count;
    return total;
}

// x : sunViewAngle01
[numthreads(8, 1, 1)]
void CSAmbient(uint3 id: SV_DispatchThreadID)
{
    int w, h;
    _RWambientLUT.GetDimensions(w,h);
    
    float cosAngle01 = (float)id.x / w;
    //float height01 = (float)id.y / h;
    
    _RWhemiSphereRandomNormlizedVecLUT.GetDimensions(w, h);
    int count = w;
    _RWambientLUT[int2(id.x,0)] = ComputeAmbient(cosAngle01, count);
}


// =================================================================================
// Precompute InScattering
// =================================================================================
// x : viewDir, y: sunDir 
[numthreads(8, 8, 1)]
void CSInScattering(uint3 id: SV_DispatchThreadID)
{
    int w, h;
    _RWinScatteringLUT.GetDimensions(w, h);
    float cosViewAngle01 = (float)id.x / h;
    float cosSunAngle01 = (float)id.y / w;
    
    float3 planetCenter = float3(0, -_PlanetRadius, 0);
    
    float3 rayStart = float3(0, _SurfaceHeight, 0);
    float cosSunAngle = cosSunAngle01 * 2 - 1;
    float sinSunAngle = 1 - sqrt(cosSunAngle * cosSunAngle);
    float3 lightDir = float3(sinSunAngle, cosSunAngle, 0);
    
    float cosViewAngle = cosViewAngle01 * 2 - 1;
    float sinViewAngle = 1 - sqrt(cosViewAngle * cosViewAngle);
    float3 rayDir = float3(sinViewAngle, cosViewAngle, 0);
    
    float2 intersection = RaySphereIntersection(rayStart, rayDir, planetCenter, _PlanetRadius + _AtmosphereHeight);
    float rayLength = intersection.y;
    
    intersection = RaySphereIntersection(rayStart, rayDir, planetCenter, _PlanetRadius);
    if (intersection.x >= 0)
        rayLength = min(rayLength, intersection.x);
    
    float3 extinction;
    _RWinScatteringLUT[id.xy] = IntegrateInscattering(rayStart, rayDir, rayLength, planetCenter, 1, lightDir, SAMPLECOUNT_INSCATTERING, extinction);
}